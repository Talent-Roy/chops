#!/usr/bin/env node
/* eslint-disable node/shebang */

/**
 * Module dependencies.
 */
const http = require('http');
const debug = require('debug')('ngolo-homes:server');
const mongoose = require('mongoose');
const app = require('../app');

require('dotenv').config({ path: 'config.env' });

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT);
app.set('port', port);
const message = `server listing on port ${port}`;

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**connect to database */
const DB = process.env.DATABASE_PROD;

mongoose
  .connect(DB, {
    useUnifiedTopology: true,
    useNewUrlParser: true,
    useCreateIndex: true,
    useFindAndModify: false
  })
  .catch(err => console.log(err))
  .then(console.log('connected to database'));

/**
 * Event listener for HTTP server "error" event.
 */

process.on('uncaughtException', err => {
  console.log('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down...');
  console.log(err.name, err.message);
  process.exit(1);
});

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(message);
}

process.on('unhandledRejection', err => {
  console.log('UNHANDLED REJECTION! ðŸ’¥ Shutting down...');
  console.log(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});
